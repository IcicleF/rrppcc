use crate::msgbuf::MsgBuf;
use crate::type_alias::*;

pub(crate) struct SSlot {
    /// Current request index.
    pub req_idx: ReqIdx,

    /// Current request type.
    pub req_type: ReqType,

    /// Request MsgBuf.
    /// - For server: this is the request from client.
    ///   It can be either a borrowed buffer from the transport (for zero-copy for small requests),
    ///   or a dynamically allocated buffer (for large requests).
    /// - For client: this is the user-provided request buffer.
    pub req: MsgBuf,

    /// Pre-allocated MsgBuf for single-packet responses.
    pre_resp_msgbuf: MsgBuf,

    /// Response MsgBuf.
    /// - For server: this is the response generated by the RPC handler.
    ///   No need for an `Option`, since burying a fake `MsgBuf` is an no-op.
    /// - For client: this is the user-provided response buffer.
    pub resp: MsgBuf,

    /// Whether the request is finished.
    /// - For server: this is set to `true` after the RPC handler returns
    ///   and the response is recorded.
    /// - For client: this is set to `true` after the response is received.
    pub finished: bool,
}

impl SSlot {
    /// Return an immutable reference to the request buffer.
    #[inline(always)]
    pub fn req_buf(&self) -> &MsgBuf {
        &self.req
    }
}
